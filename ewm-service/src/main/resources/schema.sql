drop table if exists requests;
drop table if exists events;
drop table if exists categories;
drop table if exists users;

CREATE TABLE IF NOT EXISTS users
(
    id    INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name  VARCHAR(255) UNIQUE                  NOT NULL,
    email VARCHAR(255) UNIQUE                  NOT NULL,
    CONSTRAINT pk_user_id PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS categories
(
    id   INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(255) UNIQUE                  NOT NULL,
    CONSTRAINT pk_category_id PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS events
(
    id                 INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    user_id            INT                                  NOT NULL,
    category_id        INT                                  NOT NULL,
    annotation         VARCHAR(2000)                        NOT NULL,
    description        VARCHAR(7000)                        NOT NULL,
    event_date         VARCHAR(32)                          NOT NULL,
    paid               BOOLEAN                              NOT NULL,
    participant_limit  INT,
    request_moderation BOOLEAN,
    title              VARCHAR(120)                         NOT NULL,
    event_state        VARCHAR(32),
    lat                REAL                                 NOT NULL,
    lon                REAL                                 NOT NULL,
    created_on         VARCHAR(32),
    published_on       VARCHAR(32),
    CONSTRAINT pk_event_id PRIMARY KEY (id),
    CONSTRAINT fk_event_user_id FOREIGN KEY (user_id) REFERENCES users (id),
    CONSTRAINT fk_event_category_id FOREIGN KEY (category_id) REFERENCES categories (id)
);

CREATE TABLE IF NOT EXISTS requests
(
    id       INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created  VARCHAR(32),
    event_id INT                                  NOT NULL,
    user_id  INT                                  NOT NULL,
    status   VARCHAR(32),
    CONSTRAINT pk_request_id PRIMARY KEY (id),
    CONSTRAINT fk_request_user_id FOREIGN KEY (user_id) REFERENCES users (id),
    CONSTRAINT fk_request_event_id FOREIGN KEY (event_id) REFERENCES events (id)
);
