{
	"info": {
		"_postman_id": "3ece0fbe-b8dc-4b4d-8477-00b7cdf390c4",
		"name": "TEST LOCATIONS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25913577"
	},
	"item": [
		{
			"name": "LOCATIONS",
			"item": [
				{
					"name": "New Location Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Данные в ответе должны содержать поля: id, name, lon, lat\", function () {\r",
									"pm.expect(target).to.have.property('errors');\r",
									"pm.expect(target).to.have.property('message');\r",
									"pm.expect(target).to.have.property('reason');\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('timestamp');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны быть не нулевые\", function () {\r",
									"    pm.expect(target.errors).to.not.be.null;\r",
									"    pm.expect(target.message).equal('Wrong request for getting geo data');\r",
									"    pm.expect(target.reason).equal('Incorrectly made request.');\r",
									"    pm.expect(target.status).equal('BAD_REQUEST');\r",
									"    pm.expect(target.timestamp).to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/locations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Location 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Категория должна содержать поля: id, name, lon, lat\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"pm.expect(target).to.have.property('lon');\r",
									"pm.expect(target).to.have.property('lat');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны быть не нулевые\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.name).equal('Россия, Москва, причал Красный Октябрь');\r",
									"    pm.expect(target.lon).equal(37.610718);\r",
									"    pm.expect(target.lat).equal(55.745144);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Москва Большой театр\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/locations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Location 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Категория должна содержать поля: id, name, lon, lat\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"pm.expect(target).to.have.property('lon');\r",
									"pm.expect(target).to.have.property('lat');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны быть не нулевые\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.name).equal('Россия, Москва, улица Лужники, 24с1');\r",
									"    pm.expect(target.lon).equal(37.552166);\r",
									"    pm.expect(target.lat).equal(55.715675);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"lat\": 55.715675,\r\n    \"lon\": 37.552166\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/locations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Location 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Категория должна содержать поля: id, name, lon, lat\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"pm.expect(target).to.have.property('lon');\r",
									"pm.expect(target).to.have.property('lat');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/locations/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"locations",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Locations with negative radius",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Данные в ответе должны содержать поля: id, name, lon, lat\", function () {\r",
									"pm.expect(target).to.have.property('errors');\r",
									"pm.expect(target).to.have.property('message');\r",
									"pm.expect(target).to.have.property('reason');\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('timestamp');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны быть не нулевые\", function () {\r",
									"    pm.expect(target.errors).to.not.be.null;\r",
									"    pm.expect(target.message).equal('Radius must be positive');\r",
									"    pm.expect(target.reason).equal('Incorrectly made request.');\r",
									"    pm.expect(target.status).equal('BAD_REQUEST');\r",
									"    pm.expect(target.timestamp).to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/locations?lon=30&lat=50&radius=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"locations"
							],
							"query": [
								{
									"key": "lon",
									"value": "30"
								},
								{
									"key": "lat",
									"value": "50"
								},
								{
									"key": "radius",
									"value": "-1"
								},
								{
									"key": "from",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Locations by params",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const target = pm.response.json()[0];\r",
									"\r",
									"pm.test(\"Категория должна содержать поля: id, name, lon, lat\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"pm.expect(target).to.have.property('lon');\r",
									"pm.expect(target).to.have.property('lat');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны быть не нулевые\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/locations?lon=30&lat=50&radius=1000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"locations"
							],
							"query": [
								{
									"key": "from",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "lon",
									"value": "30"
								},
								{
									"key": "lat",
									"value": "50"
								},
								{
									"key": "radius",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Events By Param with Location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const target = pm.response.json()[0];\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('annotation');\r",
									"pm.expect(target).to.have.property('category');\r",
									"pm.expect(target).to.have.property('paid');\r",
									"pm.expect(target).to.have.property('eventDate');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('views');\r",
									"pm.expect(target).to.have.property('confirmedRequests');\r",
									"pm.expect(target).to.have.property('description');\r",
									"pm.expect(target).to.have.property('participantLimit');\r",
									"pm.expect(target).to.have.property('state');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('publishedOn');\r",
									"pm.expect(target).to.have.property('location');\r",
									"pm.expect(target).to.have.property('requestModeration');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(source.annotation).equal(target.annotation, 'Аннотация события должна соответствовать искомому событию');\r",
									"    pm.expect(source.category.id).equal(target.category.id, 'Идентификатор категории должен соответствовать искомой категории');\r",
									"    pm.expect(source.paid.toString()).equal(target.paid.toString(), 'Стоимость посещения события должна соответствовать искомому событию');\r",
									"    pm.expect(source.eventDate).equal(target.eventDate, 'Дата проведения события должна соответствовать дате искомого события');\r",
									"    pm.expect(source.description).equal(target.description, 'Описание события должно соответствовать искомому событию');\r",
									"    pm.expect(source.title).equal(target.title, 'Название события должно соответствовать искомому событию');\r",
									"    pm.expect(source.participantLimit.toString()).equal(target.participantLimit.toString(), 'Число участников события должно соответствовать искомому событию');\r",
									"    pm.expect(source.location.lon).equal(target.location.lon, 'Долгота локации должно соответствовать искомой долготе локации в событии');\r",
									"    pm.expect(source.location.lat).equal(target.location.lat, 'Широта локации должно соответствовать искомой широте локации в событии');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.request.removeQueryParams(['lon', 'lat']);\r",
									"        pm.request.addQueryParams([`lon=` + event.location.lon, 'lat=' + event.location.lat]);\r",
									"        pm.collectionVariables.set('response', event);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/events?lon=0&lat=0&radius=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events"
							],
							"query": [
								{
									"key": "from",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "100",
									"disabled": true
								},
								{
									"key": "states",
									"value": "PENDING",
									"disabled": true
								},
								{
									"key": "lon",
									"value": "0"
								},
								{
									"key": "lat",
									"value": "0"
								},
								{
									"key": "radius",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const locationId = pm.collectionVariables.get('locationId');\r",
									"const lon = pm.collectionVariables.get('lon');\r",
									"const lat = pm.collectionVariables.get('lat');\r",
									"\r",
									"pm.test(\"Локация должна быть найдена до выполнения запроса\", function(){\r",
									"    pm.expect(source.id).to.eql(locationId);\r",
									"    pm.expect(source.lon).to.eql(lon);\r",
									"    pm.expect(source.lat).to.eql(lat);\r",
									"});\r",
									"\r",
									"let body\r",
									"const req = {\r",
									"                url: \"http://localhost:8080/locations/\" + locationId,\r",
									"                method: \"GET\",\r",
									"                body: body == null ? \"\" : JSON.stringify(body),\r",
									"                header: { \"Content-Type\": \"application/json\" },\r",
									"            };\r",
									"pm.sendRequest(req, (error, response) => {\r",
									"    pm.test(\"Локация должена быть удалёна после выполнения запроса\", function(){\r",
									"        if(response.id == pm.collectionVariables.get('locationId')){\r",
									"            throw new Error(\"Локация все еще находится в списке существующих\");\r",
									"        }\r",
									"\r",
									"    });\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const location = await api.addLocation(rnd.getLocation());\r",
									"        pm.collectionVariables.set('locationId', location.id);\r",
									"        pm.collectionVariables.set('lon', location.lon);\r",
									"        pm.collectionVariables.set('lat', location.lat);\r",
									"        const foundedLocation = await api.findLocation(location.id);\r",
									"        pm.collectionVariables.set('response', foundedLocation);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/locations/{{locationId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"locations",
								"{{locationId}}"
							],
							"query": [
								{
									"key": "from",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "100",
									"disabled": true
								},
								{
									"key": "states",
									"value": "PENDING",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addLocation(location, verbose=null) {",
					"        return this.post(\"/admin/locations\", location, \"Ошибка при добавлении новой локации: \", verbose);",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findLocation(locationId, verbose=null) {",
					"        return this.get('/locations/' + locationId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getLocation() {",
					"        return {",
					"            lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"            lon: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}'))",
					"        };",
					"    }",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: this.getLocation(),",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "usersCount",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "eid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catId",
			"value": ""
		},
		{
			"key": "confirmedRequests",
			"value": ""
		},
		{
			"key": "responseArr",
			"value": ""
		},
		{
			"key": "source1",
			"value": ""
		},
		{
			"key": "source2",
			"value": ""
		},
		{
			"key": "fromId",
			"value": "0"
		},
		{
			"key": "source",
			"value": ""
		},
		{
			"key": "lat",
			"value": "-23.2147",
			"type": "string"
		},
		{
			"key": "lon",
			"value": "-39.2805",
			"type": "string"
		},
		{
			"key": "locationId",
			"value": "",
			"type": "string"
		}
	]
}